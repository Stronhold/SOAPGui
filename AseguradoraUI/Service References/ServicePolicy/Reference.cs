//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AseguradoraUI.ServicePolicy {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Policies", Namespace="http://schemas.datacontract.org/2004/07/WcfService")]
    [System.SerializableAttribute()]
    public partial class Policies : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string descriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string typeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.descriptionField, value) != true)) {
                    this.descriptionField = value;
                    this.RaisePropertyChanged("description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string type {
            get {
                return this.typeField;
            }
            set {
                if ((object.ReferenceEquals(this.typeField, value) != true)) {
                    this.typeField = value;
                    this.RaisePropertyChanged("type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/WcfService")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServicePolicy.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        AseguradoraUI.ServicePolicy.Policies GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<AseguradoraUI.ServicePolicy.Policies> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        AseguradoraUI.ServicePolicy.CompositeType GetDataUsingDataContract(AseguradoraUI.ServicePolicy.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<AseguradoraUI.ServicePolicy.CompositeType> GetDataUsingDataContractAsync(AseguradoraUI.ServicePolicy.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddPolicie", ReplyAction="http://tempuri.org/IService1/AddPolicieResponse")]
        void AddPolicie(int i, string n, string d, string y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddPolicie", ReplyAction="http://tempuri.org/IService1/AddPolicieResponse")]
        System.Threading.Tasks.Task AddPolicieAsync(int i, string n, string d, string y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllPolicies", ReplyAction="http://tempuri.org/IService1/GetAllPoliciesResponse")]
        AseguradoraUI.ServicePolicy.Policies[] GetAllPolicies();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllPolicies", ReplyAction="http://tempuri.org/IService1/GetAllPoliciesResponse")]
        System.Threading.Tasks.Task<AseguradoraUI.ServicePolicy.Policies[]> GetAllPoliciesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllID", ReplyAction="http://tempuri.org/IService1/GetAllIDResponse")]
        int[] GetAllID();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllID", ReplyAction="http://tempuri.org/IService1/GetAllIDResponse")]
        System.Threading.Tasks.Task<int[]> GetAllIDAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddPolicy", ReplyAction="http://tempuri.org/IService1/AddPolicyResponse")]
        bool AddPolicy(int id, string name, string desc, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddPolicy", ReplyAction="http://tempuri.org/IService1/AddPolicyResponse")]
        System.Threading.Tasks.Task<bool> AddPolicyAsync(int id, string name, string desc, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RemovePolicy", ReplyAction="http://tempuri.org/IService1/RemovePolicyResponse")]
        bool RemovePolicy(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RemovePolicy", ReplyAction="http://tempuri.org/IService1/RemovePolicyResponse")]
        System.Threading.Tasks.Task<bool> RemovePolicyAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdatePolicy", ReplyAction="http://tempuri.org/IService1/UpdatePolicyResponse")]
        bool UpdatePolicy(int id, string name, string desc, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdatePolicy", ReplyAction="http://tempuri.org/IService1/UpdatePolicyResponse")]
        System.Threading.Tasks.Task<bool> UpdatePolicyAsync(int id, string name, string desc, string type);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : AseguradoraUI.ServicePolicy.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<AseguradoraUI.ServicePolicy.IService1>, AseguradoraUI.ServicePolicy.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public AseguradoraUI.ServicePolicy.Policies GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<AseguradoraUI.ServicePolicy.Policies> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public AseguradoraUI.ServicePolicy.CompositeType GetDataUsingDataContract(AseguradoraUI.ServicePolicy.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<AseguradoraUI.ServicePolicy.CompositeType> GetDataUsingDataContractAsync(AseguradoraUI.ServicePolicy.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public void AddPolicie(int i, string n, string d, string y) {
            base.Channel.AddPolicie(i, n, d, y);
        }
        
        public System.Threading.Tasks.Task AddPolicieAsync(int i, string n, string d, string y) {
            return base.Channel.AddPolicieAsync(i, n, d, y);
        }
        
        public AseguradoraUI.ServicePolicy.Policies[] GetAllPolicies() {
            return base.Channel.GetAllPolicies();
        }
        
        public System.Threading.Tasks.Task<AseguradoraUI.ServicePolicy.Policies[]> GetAllPoliciesAsync() {
            return base.Channel.GetAllPoliciesAsync();
        }
        
        public int[] GetAllID() {
            return base.Channel.GetAllID();
        }
        
        public System.Threading.Tasks.Task<int[]> GetAllIDAsync() {
            return base.Channel.GetAllIDAsync();
        }
        
        public bool AddPolicy(int id, string name, string desc, string type) {
            return base.Channel.AddPolicy(id, name, desc, type);
        }
        
        public System.Threading.Tasks.Task<bool> AddPolicyAsync(int id, string name, string desc, string type) {
            return base.Channel.AddPolicyAsync(id, name, desc, type);
        }
        
        public bool RemovePolicy(int id) {
            return base.Channel.RemovePolicy(id);
        }
        
        public System.Threading.Tasks.Task<bool> RemovePolicyAsync(int id) {
            return base.Channel.RemovePolicyAsync(id);
        }
        
        public bool UpdatePolicy(int id, string name, string desc, string type) {
            return base.Channel.UpdatePolicy(id, name, desc, type);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePolicyAsync(int id, string name, string desc, string type) {
            return base.Channel.UpdatePolicyAsync(id, name, desc, type);
        }
    }
}
