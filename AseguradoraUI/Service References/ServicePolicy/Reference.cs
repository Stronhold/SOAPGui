//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AseguradoraUI.ServicePolicy {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Policy", Namespace="http://schemas.datacontract.org/2004/07/Aseguradora")]
    [System.SerializableAttribute()]
    public partial class Policy : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServicePolicy.IServicePolicy")]
    public interface IServicePolicy {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePolicy/GetData", ReplyAction="http://tempuri.org/IServicePolicy/GetDataResponse")]
        AseguradoraUI.ServicePolicy.Policy GetData(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePolicy/GetData", ReplyAction="http://tempuri.org/IServicePolicy/GetDataResponse")]
        System.Threading.Tasks.Task<AseguradoraUI.ServicePolicy.Policy> GetDataAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePolicy/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IServicePolicy/GetDataUsingDataContractResponse")]
        AseguradoraUI.ServicePolicy.Policy GetDataUsingDataContract(AseguradoraUI.ServicePolicy.Policy composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePolicy/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IServicePolicy/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<AseguradoraUI.ServicePolicy.Policy> GetDataUsingDataContractAsync(AseguradoraUI.ServicePolicy.Policy composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePolicy/GetAllPolicies", ReplyAction="http://tempuri.org/IServicePolicy/GetAllPoliciesResponse")]
        AseguradoraUI.ServicePolicy.Policy[] GetAllPolicies();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePolicy/GetAllPolicies", ReplyAction="http://tempuri.org/IServicePolicy/GetAllPoliciesResponse")]
        System.Threading.Tasks.Task<AseguradoraUI.ServicePolicy.Policy[]> GetAllPoliciesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePolicy/AddPolicy", ReplyAction="http://tempuri.org/IServicePolicy/AddPolicyResponse")]
        bool AddPolicy(int id, string name, string desc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePolicy/AddPolicy", ReplyAction="http://tempuri.org/IServicePolicy/AddPolicyResponse")]
        System.Threading.Tasks.Task<bool> AddPolicyAsync(int id, string name, string desc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePolicy/RemovePolicy", ReplyAction="http://tempuri.org/IServicePolicy/RemovePolicyResponse")]
        bool RemovePolicy(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePolicy/RemovePolicy", ReplyAction="http://tempuri.org/IServicePolicy/RemovePolicyResponse")]
        System.Threading.Tasks.Task<bool> RemovePolicyAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePolicy/UpdatePolicy", ReplyAction="http://tempuri.org/IServicePolicy/UpdatePolicyResponse")]
        bool UpdatePolicy(int id, string name, string desc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePolicy/UpdatePolicy", ReplyAction="http://tempuri.org/IServicePolicy/UpdatePolicyResponse")]
        System.Threading.Tasks.Task<bool> UpdatePolicyAsync(int id, string name, string desc);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServicePolicyChannel : AseguradoraUI.ServicePolicy.IServicePolicy, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServicePolicyClient : System.ServiceModel.ClientBase<AseguradoraUI.ServicePolicy.IServicePolicy>, AseguradoraUI.ServicePolicy.IServicePolicy {
        
        public ServicePolicyClient() {
        }
        
        public ServicePolicyClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServicePolicyClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServicePolicyClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServicePolicyClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public AseguradoraUI.ServicePolicy.Policy GetData(int id) {
            return base.Channel.GetData(id);
        }
        
        public System.Threading.Tasks.Task<AseguradoraUI.ServicePolicy.Policy> GetDataAsync(int id) {
            return base.Channel.GetDataAsync(id);
        }
        
        public AseguradoraUI.ServicePolicy.Policy GetDataUsingDataContract(AseguradoraUI.ServicePolicy.Policy composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<AseguradoraUI.ServicePolicy.Policy> GetDataUsingDataContractAsync(AseguradoraUI.ServicePolicy.Policy composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public AseguradoraUI.ServicePolicy.Policy[] GetAllPolicies() {
            return base.Channel.GetAllPolicies();
        }
        
        public System.Threading.Tasks.Task<AseguradoraUI.ServicePolicy.Policy[]> GetAllPoliciesAsync() {
            return base.Channel.GetAllPoliciesAsync();
        }
        
        public bool AddPolicy(int id, string name, string desc) {
            return base.Channel.AddPolicy(id, name, desc);
        }
        
        public System.Threading.Tasks.Task<bool> AddPolicyAsync(int id, string name, string desc) {
            return base.Channel.AddPolicyAsync(id, name, desc);
        }
        
        public bool RemovePolicy(int id) {
            return base.Channel.RemovePolicy(id);
        }
        
        public System.Threading.Tasks.Task<bool> RemovePolicyAsync(int id) {
            return base.Channel.RemovePolicyAsync(id);
        }
        
        public bool UpdatePolicy(int id, string name, string desc) {
            return base.Channel.UpdatePolicy(id, name, desc);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePolicyAsync(int id, string name, string desc) {
            return base.Channel.UpdatePolicyAsync(id, name, desc);
        }
    }
}
